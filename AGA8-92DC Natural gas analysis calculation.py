import numpy as np

#Declaration for known equation state parameters

state_a = np.array([ 0.153832600,  1.341953000, -2.998583000, -0.048312280,  0.375796500, -1.589575000, -0.053588470,  0.886594630, -0.710237040, -1.471722000,
                      1.321850350, -0.786659250,  0.2291290e-8, 0.157672400, -0.436386400, -0.044081590, -0.003433888,  0.032059050,  0.024873550,  0.073322790,
                     -0.001600573,  0.642470600, -0.416260100, -0.066899570,  0.279179500, -0.696605100, -0.002860589, -0.008098836,  3.150547000,  0.007224479,
                     -0.705752900,  0.534979200, -0.079314910, -1.418465000, -0.599905e-16, 0.105840200,  0.034317290, -0.007022847,  0.024955870,  0.042968180,
                      0.746545300, -0.291961300,  7.294616000, -9.936757000, -0.005399808, -0.243256700,  0.049870160,  0.003733797,  1.874951000,  0.002168144,
                     -0.658716400,  0.000205518,  0.009776195, -0.020487080,  0.015573220,  0.006862415, -0.001226752,  0.002850908 ])

state_b = np.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,6,6,7,7,8,8,8,9,9])
state_c = np.array([0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1])
state_k = np.array([0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,4,4,0,0,2,2,2,4,4,4,4,0,1,1,2,2,3,3,4,4,4,0,0,2,2,2,4,4,0,2,2,4,4,0,2,0,2,1,2,2,2,2])
state_g = np.array([0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0])
state_q = np.array([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1])
state_f = np.array([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
state_s = np.array([0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
state_w = np.array([0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
state_u = np.array([0.0,0.5,1.0,3.5,-0.5,4.5,0.5,7.5,9.5,6.0,12.0,12.5,-6.0,2.0,3.0,2.0,2.0,11.0,-0.5,0.5,0.0,4.0,6.0,21.0,23.0,22.0,-1.0,-0.5,7.0,
         -1.0,6.0,4.0,1.0,9.0,-13.0,21.0,8.0,-0.5,0.0,2.0,7.0,9.0,22.0,23.0,1.0,9.0,3.0,8.0,23.0,1.5,5.0,-0.5,4.0,7.0,3.0,0.0,1.0,0.0])

#Declaration for components characterization parameters

comp_name=["Methane","Nitrogen","Carbon Dioxide","Ethane","Propane","Water","Hydrogen sulfide","Hydrogen","Carbon monooxide",
           "Oxygen","iso-Butane","n-Butane","iso-Pentane","n-Pentane","n-Hexane","n-Heptane","n-Octane","n-Nonane","n-Decane",
           "Helium","Argon"]

comp_M = np.array([ 16.0430,28.0135,44.0100,30.0700,44.0970,18.0153,34.0820,2.0159,28.0100,31.9988,58.1230,58.1230,72.1500,72.1500,86.1770,100.2040,114.2310,128.2580,142.2850,4.0026,39.9480 ])

comp_E = np.array([ 151.318300, 99.737780,241.960600,244.166700,298.118300,514.015600,296.355000, 26.957940,105.534800,122.766700,324.068900,
          337.638900,365.599900,370.682300,402.636293,427.722630,450.325022,470.840891,489.558373,  2.610111,119.629900 ])
comp_K = np.array([ 0.4619255,0.4479153,0.4557489,0.5279209,0.5837490,0.3825868,0.4618263,0.3514916,0.4533894,0.4186954,0.6406937,
          0.6341423,0.6738577,0.6798307,0.7175118,0.7525189,0.7849550,0.8152731,0.8437826,0.3589888,0.4216551 ])

comp_G = np.array([ 0.000000,0.027815,0.189065,0.079300,0.141239,0.332500,0.088500,0.034369,0.038953,0.021000,0.256692,
          0.281835,0.332267,0.366911,0.289731,0.337542,0.383381,0.427354,0.469659,0.000000,0.000000 ])

comp_Q = np.array([ 0.0,0.0,0.69,0.0,0.0,1.06775,0.633276,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 ])

comp_F = np.array([ 0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 ])

comp_S = np.array([ 0.0,0.0,0.0,0.0,0.0,1.5822,0.390,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 ])

comp_W = np.array([ 0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 ])

#Declaration for binary interaction parameters parameters

bin_E_star = np.array([
  [ 1.000000,0.971640,0.960644,1.000000,0.994635,0.708218,0.931484,1.170520,0.990126,1.000000,1.019530,0.989844,1.002350,0.999268,1.107274,0.880880,0.880973,0.881067,0.881161,1.000000,1.000000],
  [ 1.000000,1.000000,1.022740,0.970120,0.945939,0.746954,0.902271,1.086320,1.005710,1.021000,0.946914,0.973384,0.959340,0.945520,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,0.925053,0.960237,0.849408,0.955052,1.281790,1.500000,1.000000,0.906849,0.897362,0.726255,0.859764,0.855134,0.831229,0.808310,0.786323,0.765171,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.022560,0.693168,0.946871,1.164460,1.000000,1.000000,1.000000,1.013060,1.000000,1.005320,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.034787,1.000000,1.000000,1.000000,1.004900,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.008692,1.010126,1.011501,1.012821,1.014089,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.100000,1.000000,1.300000,1.300000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [ 1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000]])

bin_U = np.array([
  [1.000000,0.886106,0.963827,1.000000,0.990877,1.000000,0.736833,1.156390,1.000000,1.000000,1.000000,0.992291,1.000000,1.003670,1.302576,1.191904,1.205769,1.219634,1.233498,1.000000,1.000000],
  [1.000000,1.000000,0.835058,0.816431,0.915502,1.000000,0.993476,0.408838,1.000000,1.000000,1.000000,0.993556,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,0.969870,1.000000,1.000000,1.045290,1.000000,0.900000,1.000000,1.000000,1.000000,1.000000,1.000000,1.066638,1.077634,1.088178,1.098291,1.108021,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.065173,1.000000,0.971926,1.616660,1.000000,1.000000,1.250000,1.250000,1.250000,1.250000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.028973,1.033754,1.038338,1.042735,1.046966,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000]])

bin_K = np.array([
  [1.000000,1.003630,0.995933,1.000000,1.007619,1.000000,1.000080,1.023260,1.000000,1.000000,1.000000,0.997596,1.000000,1.002529,0.982962,0.983565,0.982707,0.981849,0.980991,1.000000,1.000000],
  [1.000000,1.000000,0.982361,1.007960,1.000000,1.000000,0.942596,1.032270,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.008510,1.000000,1.000000,1.007790,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,0.910183,0.895362,0.881152,0.867520,0.854406,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,0.986893,1.000000,0.999969,1.020340,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,0.968130,0.962870,0.957828,0.952441,0.948338,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000]])

bin_G_star = np.array([
  [1.000000,1.000000,0.807653,1.000000,1.000000,1.000000,1.000000,1.957310,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,0.982746,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,0.370296,1.000000,1.673090,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000],
  [1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000]])

print("-------This program is used to calculate compressibility factor, density and-------")
print("--------related parameters according to AGA8-92DC Equation for natural gas---------")
print("--------which is used in ISO 12213-2:2006 standard---------------------------------")

#Constant Declaration, User-input parameters and unit conversion
R = 8.3145e-03         #Universal gas constant, MJ/K-1.mol-1
P_input = float(input("Operating pressure of gas mixture (barg): "))
T_input = float(input("Operating temperature of gas mixture (degC): "))

#X = [0.965, 0.003, 0.006, 0.018, 0.0045, 0, 0, 0, 0, 0, 0.001, 0.001, 0.0005, 0.0003, 0.0007, 0, 0, 0, 0, 0, 0]                        #gas1
#X = [0.907, 0.031, 0.005, 0.045, 0.0084, 0, 0, 0, 0, 0, 0.001, 0.0015, 0.0003, 0.0004, 0.0004, 0, 0, 0, 0, 0, 0]                       #gas2    
#X = [0.859, 0.01, 0.015, 0.085, 0.023, 0, 0, 0, 0, 0, 0.0035, 0.0035, 0.0005, 0.0005, 0, 0, 0, 0, 0, 0, 0]                             #gas3                            
#X = [0.735, 0.1, 0.016, 0.033, 0.0074, 0, 0, 0.095, 0.01, 0, 0.0012, 0.0012, 0.0004, 0.0004, 0.0002, 0.0001, 0.0001, 0, 0, 0, 0]       #gas4 
#X = [0.812, 0.057, 0.076, 0.043, 0.009, 0, 0, 0, 0, 0, 0.0015, 0.0015, 0, 0, 0, 0, 0, 0, 0, 0, 0]                                      #gas5 
#X = [0.826, 0.117, 0.011, 0.035, 0.0075, 0, 0, 0, 0, 0, 0.0012, 0.0012, 0.0004, 0.0004, 0.0002, 0.0001, 0, 0, 0, 0, 0]                 #gas6
#"Methane","Nitrogen","Carbon Dioxide","Ethane","Propane","Water","Hydrogen sulfide","Hydrogen","Carbon monooxide",
#           "Oxygen","iso-Butane","n-Butane","iso-Pentane","n-Pentane","n-Hexane","n-Heptane","n-Octane","n-Nonane","n-Decane",
#           "Helium","Argon"
X = np.zeros(len(comp_name))
for i in range(len(X)):
    X[i] = float(input("Mole fraction of " + str(comp_name[i]) + " in gas mixture: "))
X=X / 100
print("Sum of mole fraction in the mixture: ",np.sum(X))
print("Number of components: ", len(X))
P = P_input * 0.1 + 0.101325
#P = P_input * 0.1
T = T_input + 273.15
print("Operating pressure in MPa: ", P)
print("Operating temperature in Kelvin: ", T)
mixture_M = comp_M @ X

#Define of coefficient K in original AGA8-92DC Equation

coef_eqn_K1 = 0
coef_eqn_K2 = 0

for i in range (len(X)):
    coef_eqn_K1 += X[i] * np.float_power(comp_K[i], 2.5)

for i in range (0, len(X)-1):
    for j in range (i + 1, len(X)):
        coef_eqn_K2 += X[i] * X[j] * (np.power(bin_K[i,j],5) - 1) * np.float_power(comp_K[i] * comp_K[j], 2.5)

K = np.float_power(np.square(coef_eqn_K1) + coef_eqn_K2 * 2, 0.2)

#Define for coefficient U,G,Q,F in C* Equation

#Define for coefficient U:

coef_cons_U1 = 0
coef_cons_U2 = 0

for i in range (len(X)):
    coef_cons_U1 += X[i] * np.float_power(comp_E[i], 2.5)


for i in range (0, len(X)-1):
    for j in range (i + 1, len(X)):    #test and check
        coef_cons_U2 += X[i] * X[j] * (np.power(bin_U[i,j],5) - 1) * np.float_power(comp_E[i] * comp_E[j], 2.5)

coef_U = np.float_power(np.square(coef_cons_U1) + 2 * coef_cons_U2, 0.2)

#Define for coefficient G:

coef_cons_G1 = comp_G @ X
coef_cons_G2 = 0

for i in range (0, len(X)-1):
    for j in range (i + 1, len(X)):    #test and check
        coef_cons_G2 += X[i] * X[j] * (bin_G_star[i,j] - 1) * (comp_G[i] + comp_G[j])

coef_G = coef_cons_G1 + coef_cons_G2

#Define for coefficient Q,F

coef_Q = comp_Q @ X
coef_F = np.square(X) @ comp_F

#Define for coefficient C* in original AGA8-92DC equation

coef_C_star = np.zeros(len(state_c))
for n in range(len(state_c)):        
    coef_C_star[n] = state_a[n] * np.float_power(coef_G +1 - state_g[n], state_g[n]) * np.float_power(coef_Q ** 2 + 1 - state_q[n], state_q[n]) * np.float_power(coef_F + 1 - state_f[n], state_f[n]) * np.float_power(coef_U, state_u[n]) * np.float_power(T, -state_u[n])

#Define for coefficient Eij in B coefficient equation:

bin_E = np.zeros((bin_E_star.shape[0], bin_E_star.shape[1]))

for i in range(bin_E_star.shape[0]):
    for j in range(bin_E_star.shape[1]):
        bin_E[i,j] = bin_E_star[i,j] * np.float_power(comp_E[i] * comp_E[j], 0.5)

#Define for coefficient bin_Gij in B coefficient equation

bin_G = np.zeros((bin_G_star.shape[0],bin_G_star.shape[1]))

for i in range(bin_G_star.shape[0]):
    for j in range(bin_G_star.shape[1]):
        bin_G[i,j] = bin_G_star[i,j] * (comp_G[i] + comp_G[j]) / 2

#Define coefficient Bnij* in the B coeficient equation

coef_B_star = np.zeros((len(state_c),bin_E_star.shape[0],bin_E_star.shape[1]))
for n in range(len(state_c)):
    for i in range(bin_E_star.shape[0]):
        for j in range(bin_E_star.shape[1]):    
            coef_B_star[n,i,j] = np.float_power(bin_G[i,j] + 1 - state_g[n], state_g[n]) * np.float_power(comp_Q[i] * comp_Q[j] + 1 - state_q[n], state_q[n]) * np.float_power(np.float_power(comp_F[i] * comp_F[j], 0.5) + 1 - state_f[n], state_f[n]) * np.float_power(comp_S[i] * comp_S[j] + 1 - state_s[n], state_s[n]) * np.float_power(comp_W[i] * comp_W[j] + 1 - state_w[n], state_w[n])

#Define coefficient B in original AGA8-92DC equation:
coef_eqn_B = 0
arr_coef_eqn_B = np.zeros(len(state_c))
for n in range(18):                      
    for i in range(bin_E_star.shape[0]):
        for j in range(i, bin_E_star.shape[1]):
            Xij = X[i] * X[j]
            if (i != j):
                Xij = 2 * Xij
            arr_coef_eqn_B[n] += Xij * coef_B_star[n,i,j] * np.float_power(bin_E[i,j], state_u[n]) * np.float_power(comp_K[i] * comp_K[j], 1.5) 

for n in range (18):                     
    coef_eqn_B += state_a[n] * np.float_power(T, -state_u[n]) * arr_coef_eqn_B[n]
 
print("-----Calculation parameter for iteration process-----")
print("Parameter U: ",coef_U)
print("Parameter G: ",coef_G)
print("Parameter Q: ",coef_Q)
print("Parameter F: ",coef_F)
print("Parameters C*(n): ")
print(np.round(coef_C_star, 6))
print("Constant B: ",coef_eqn_B )
print("Constant K: ",K)

#Define function from density and other constant in iteration algorithm
def func(density, B, b ,c ,k ,K, C_star):
    result = 0
    r_density = np.power(K,3) * density
    result += 1 + B * density
    for n in range (12, 18):
        result -= r_density * C_star[n]
    for n in range (12, 58):
        result += C_star[n] * (b[n] - c[n] * k[n] * np.float_power(r_density, k[n])) * np.float_power(r_density, b[n]) * np.exp(- c[n] * np.float_power(r_density, k[n]))
    return result

#Main iteration algorithm
density_mol = P / (R * T)
Z = func(density_mol, coef_eqn_B, state_b, state_c, state_k, K, coef_C_star)
while np.abs(density_mol - P / (Z * R * T)) > 1e-9:
    density_mol = P / (Z * R * T)
    Z = func(density_mol, coef_eqn_B, state_b, state_c, state_k, K, coef_C_star)
print("Molecular weight of gas mixture (kg/kmol): ", mixture_M)
print("Molar density of gas mixture (kmol/m3):", density_mol)
print("Compressibility factor of gas mixture: ", Z)
print("Mass density of gas mixture (kg/m3):", mixture_M * density_mol)
